// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model user {
    id        Int      @id @default(autoincrement())
    email     String   @unique
    name      String
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model category {
    id          Int       @id @default(autoincrement())
    name        String    @unique
    description String    @db.Text
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    public      Boolean   @default(false)
    products    product[]

    @@index([public])
}

model product {
    id          Int              @id @default(autoincrement())
    name        String           @unique
    price       Decimal          @db.Decimal(10, 3)
    description String           @db.Text
    quantity    Int
    available   Boolean          @default(false)
    images      product_images[]
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
    cost        Decimal          @default(0) @db.Decimal(10, 3)
    category    category         @relation(fields: [categoryId], references: [id], onDelete: Restrict)
    categoryId  Int
    code        String           @unique
    profit      Decimal          @default(0) @db.Decimal(10, 3)
    collections collection[]
    sales       product_order[]

    @@index([code])
    @@index([categoryId])
}

model product_images {
    id        Int      @id @default(autoincrement())
    productId Int
    product   product  @relation(fields: [productId], references: [id])
    image     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Missing full fill sales - per customer
// Pesquisa por código
// Adicionar grupo do cliente
model business {
    id        Int      @id @default(autoincrement())
    name      String
    email     String
    phone     String
    whatsapp  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    featuredCollection   collection? @relation(fields: [featuredCollectionId], references: [id])
    featuredCollectionId Int?        @unique
}

model collection {
    id          Int       @id @default(autoincrement())
    name        String    @unique
    description String    @db.Text
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    public      Boolean   @default(false)
    business    business?
    products    product[]
}

model ErrorLogs {
    id        BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    message String
    stack   String
    info    String
    userId  BigInt? @db.UnsignedBigInt
}

model groups {
    id          Int      @id @default(autoincrement())
    name        String   @unique
    description String   @default("Selecione uma descrição")
    createdAt   DateTime @default(now())
    phone       String   @default("Edite este número")
    updatedAt   DateTime @updatedAt
    order       order[]
}

model order {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    group           groups         @relation(fields: [groupId], references: [id])
    groupId         Int
    total           Decimal         @db.Decimal(10, 3)
    paymentMethod   payment_methods @relation(fields: [paymentMethodId], references: [id])
    paymentMethodId Int
    paid            Boolean         @default(false)
    products        product_order[]
}

model product_order {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name      String  @unique
    price     Decimal @db.Decimal(10, 3)
    cost      Decimal @default(0) @db.Decimal(10, 3)
    quantity  Int
    code      String
    profit    Decimal @default(0) @db.Decimal(10, 3)
    orders    order   @relation(fields: [orderId], references: [id])
    orderId   Int
    product   product @relation(fields: [productId], references: [id])
    productId Int
}

model payment_methods {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    taxRate   Decimal  @db.Decimal(10, 3)
    enabled   Boolean  @default(true)

    order order[]
}
